# Autogenerated from a Treetop grammar. Edits may be lost.


module LogicalQuery
  include Treetop::Runtime

  def root
    @root ||= :exp
  end

  module Exp0
    def any
      elements[0]
    end
  end

  def _nt_exp
    start_index = index
    if node_cache[:exp].has_key?(index)
      cached = node_cache[:exp][index]
      if cached
        node_cache[:exp][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_cond
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      r3 = _nt_exp_paren
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        r4 = _nt_literal_seq
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r1 = r4
        else
          r5 = _nt_literal
          if r5
            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
            r1 = r5
          else
            @index = i1
            r1 = nil
          end
        end
      end
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(ExpNode,input, i0...index, s0)
      r0.extend(Exp0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:exp][start_index] = r0

    r0
  end

  module ExpParen0
    def lparen
      elements[0]
    end

    def exp
      elements[2]
    end

    def rparen
      elements[4]
    end
  end

  def _nt_exp_paren
    start_index = index
    if node_cache[:exp_paren].has_key?(index)
      cached = node_cache[:exp_paren][index]
      if cached
        node_cache[:exp_paren][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_lparen
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_sp
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_exp
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_sp
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_rparen
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ExpParenNode,input, i0...index, s0)
      r0.extend(ExpParen0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:exp_paren][start_index] = r0

    r0
  end

  module Cond0
    def lexp
      elements[0]
    end

    def logic
      elements[2]
    end

    def rexp
      elements[4]
    end
  end

  def _nt_cond
    start_index = index
    if node_cache[:cond].has_key?(index)
      cached = node_cache[:cond][index]
      if cached
        node_cache[:cond][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_exp_paren
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      r3 = _nt_literal
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        r5 = _nt_sp
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s0 << r4
      if r4
        i6 = index
        r7 = _nt_land
        if r7
          r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
          r6 = r7
        else
          r8 = _nt_lor
          if r8
            r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
            r6 = r8
          else
            @index = i6
            r6 = nil
          end
        end
        s0 << r6
        if r6
          s9, i9 = [], index
          loop do
            r10 = _nt_sp
            if r10
              s9 << r10
            else
              break
            end
          end
          if s9.empty?
            @index = i9
            r9 = nil
          else
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          end
          s0 << r9
          if r9
            r11 = _nt_exp
            s0 << r11
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(CondNode,input, i0...index, s0)
      r0.extend(Cond0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:cond][start_index] = r0

    r0
  end

  module LiteralSeq0
    def lliteral
      elements[0]
    end

    def rliteral
      elements[2]
    end
  end

  def _nt_literal_seq
    start_index = index
    if node_cache[:literal_seq].has_key?(index)
      cached = node_cache[:literal_seq][index]
      if cached
        node_cache[:literal_seq][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_literal
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_sp
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        i4 = index
        r5 = _nt_literal_seq
        if r5
          r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
          r4 = r5
        else
          r6 = _nt_literal
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r4 = r6
          else
            @index = i4
            r4 = nil
          end
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(LiteralSeqNode,input, i0...index, s0)
      r0.extend(LiteralSeq0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:literal_seq][start_index] = r0

    r0
  end

  module Literal0
    def negative
      elements[0]
    end

    def word
      elements[1]
    end
  end

  def _nt_literal
    start_index = index
    if node_cache[:literal].has_key?(index)
      cached = node_cache[:literal][index]
      if cached
        node_cache[:literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_negative
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      r3 = _nt_word
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(LiteralNode,input, i0...index, s0)
      r0.extend(Literal0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:literal][start_index] = r0

    r0
  end

  def _nt_word
    start_index = index
    if node_cache[:word].has_key?(index)
      cached = node_cache[:word][index]
      if cached
        node_cache[:word][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_quoted_word
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
      r0.extend(WordNode)
    else
      r2 = _nt_unquoted_word
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
        r0.extend(WordNode)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:word][start_index] = r0

    r0
  end

  module QuotedWord0
  end

  module QuotedWord1
  end

  def _nt_quoted_word
    start_index = index
    if node_cache[:quoted_word].has_key?(index)
      cached = node_cache[:quoted_word][index]
      if cached
        node_cache[:quoted_word][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('"', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'"\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if (match_len = has_terminal?('\"', false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'\\"\'')
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r3 = r4
        else
          i5, s5 = index, []
          i6 = index
          if (match_len = has_terminal?('"', false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('\'"\'')
            r7 = nil
          end
          if r7
            @index = i6
            r6 = nil
            terminal_parse_failure('\'"\'', true)
          else
            @terminal_failures.pop
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r6
          if r6
            if index < input_length
              r8 = true
              @index += 1
            else
              terminal_parse_failure("any character")
              r8 = nil
            end
            s5 << r8
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(QuotedWord0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('"', false, index))
          r9 = true
          @index += match_len
        else
          terminal_parse_failure('\'"\'')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(QuotedWord1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:quoted_word][start_index] = r0

    r0
  end

  def _nt_unquoted_word
    start_index = index
    if node_cache[:unquoted_word].has_key?(index)
      cached = node_cache[:unquoted_word][index]
      if cached
        node_cache[:unquoted_word][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_atom
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:unquoted_word][start_index] = r0

    r0
  end

  def _nt_land
    start_index = index
    if node_cache[:land].has_key?(index)
      cached = node_cache[:land][index]
      if cached
        node_cache[:land][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('AND', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'AND\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
      r0.extend(AndNode)
    else
      if (match_len = has_terminal?('and', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'and\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
        r0.extend(AndNode)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:land][start_index] = r0

    r0
  end

  def _nt_lor
    start_index = index
    if node_cache[:lor].has_key?(index)
      cached = node_cache[:lor][index]
      if cached
        node_cache[:lor][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('OR', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'OR\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
      r0.extend(OrNode)
    else
      if (match_len = has_terminal?('or', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'or\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
        r0.extend(OrNode)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:lor][start_index] = r0

    r0
  end

  def _nt_lparen
    start_index = index
    if node_cache[:lparen].has_key?(index)
      cached = node_cache[:lparen][index]
      if cached
        node_cache[:lparen][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?('(', false, index))
      r0 = instantiate_node(LParenNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'(\'')
      r0 = nil
    end

    node_cache[:lparen][start_index] = r0

    r0
  end

  def _nt_rparen
    start_index = index
    if node_cache[:rparen].has_key?(index)
      cached = node_cache[:rparen][index]
      if cached
        node_cache[:rparen][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?(')', false, index))
      r0 = instantiate_node(RParenNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\')\'')
      r0 = nil
    end

    node_cache[:rparen][start_index] = r0

    r0
  end

  def _nt_negative
    start_index = index
    if node_cache[:negative].has_key?(index)
      cached = node_cache[:negative][index]
      if cached
        node_cache[:negative][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('-', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'-\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
      r0.extend(NegativeNode)
    else
      if (match_len = has_terminal?('-', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'-\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
        r0.extend(NegativeNode)
      else
        if (match_len = has_terminal?('－', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\'－\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
          r0.extend(NegativeNode)
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:negative][start_index] = r0

    r0
  end

  def _nt_sp
    start_index = index
    if node_cache[:sp].has_key?(index)
      cached = node_cache[:sp][index]
      if cached
        node_cache[:sp][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?(' ', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\' \'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('　', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'　\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:sp][start_index] = r0

    r0
  end

  module Atom0
  end

  def _nt_atom
    start_index = index
    if node_cache[:atom].has_key?(index)
      cached = node_cache[:atom][index]
      if cached
        node_cache[:atom][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2 = index
    r3 = _nt_lparen
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      r4 = _nt_rparen
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r2 = r4
      else
        r5 = _nt_negative
        if r5
          r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
          r2 = r5
        else
          r6 = _nt_sp
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r2 = r6
          else
            @index = i2
            r2 = nil
          end
        end
      end
    end
    if r2
      @index = i1
      r1 = nil
      terminal_parse_failure("(any alternative)", true)
    else
      @terminal_failures.pop
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if index < input_length
        r7 = true
        @index += 1
      else
        terminal_parse_failure("any character")
        r7 = nil
      end
      s0 << r7
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Atom0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:atom][start_index] = r0

    r0
  end

end

class LogicalQueryParser < Treetop::Runtime::CompiledParser
  include LogicalQuery
end


